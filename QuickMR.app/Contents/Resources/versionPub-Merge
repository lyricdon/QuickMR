#!/bin/bash

set -e

PROJECT_URL=$1
SOURCE_BRANCH=$2
TARGET_BRANCH=$3
PROJECT_ID=$4
PRIVATE_TOKEN=$5
TITLE=$6
DESC=$7
APPROVALS=$8
DELETESOURCE=$9

GITLAB_URL=`echo $PROJECT_URL | cut -d "/" -f 1,2,3`
PROJECT_NAME=${PROJECT_URL##*/}
API_URL=$GITLAB_URL/api/v4
  
urlencode() {
  local length="${#1}"
  for (( i = 0; i < length; i++ )); do
    local c="${1:i:1}"
    case $c in
      [a-zA-Z0-9.~_-]) printf "$c" ;;
    *) printf "$c" | xxd -p -c1 | while read x;do printf "%%%s" "$x";done
  esac
done
}

if [ -z "$TITLE" ]; then
    TITLE="Merge branch $SOURCE_BRANCH into $TARGET_BRANCH"
fi
TITLE=$(urlencode "$TITLE")
DESC=$(urlencode "$DESC")

echo -e "
PROJECT_ID              $PROJECT_ID
PROJECT_URL             $PROJECT_URL
SOURCE_BRANCH           $SOURCE_BRANCH
TARGET_BRANCH           $TARGET_BRANCH
GITLAB_URL              $GITLAB_URL
PROJECT_NAME            $PROJECT_NAME"


# create merge request
createMR() {
  data="source_branch=$SOURCE_BRANCH&target_branch=$TARGET_BRANCH&title=$TITLE&description=$DESC&remove_source_branch=$DELETESOURCE&approvals_before_merge=$APPROVALS"
  echo $(curl --header "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" \
    --data $data \
    "$API_URL/projects/$PROJECT_ID/merge_requests")
}

echo -e "
Start Create Merge Request: "

merge_request_res=$(createMR)
merge_request_iid=$(echo $merge_request_res | cut -d ':' -f 3 | cut -d ',' -f1)

# Accept merge request
if [[ $merge_request_iid == *[0-9] ]]; then
  echo -e "    Create Merge Request SUCCESS!"
  echo -e "    Merge Request URL: $PROJECT_URL/merge_requests/$merge_request_iid"
    
else
    echo -e "    Create Merge Request FAILURE!!"
    echo "    $merge_request_res"
fi

exit 0
